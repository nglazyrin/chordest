/* Generated By:JavaCC: Do not edit this line. ChordParser.java */
  package chordest.io.lab.chordparser;

  import chordest.model.Chord;
  import chordest.model.Interval;
  import chordest.model.Note;
  import java.io.ByteArrayInputStream;
  import java.io.PrintStream;
  import java.util.List;
  import java.util.ArrayList;

  public class ChordParser implements ChordParserConstants {
    public static void main(String[] args) throws ParseException, TokenMgrError, NumberFormatException {
      ChordParser parser = new ChordParser(System.in);
      parser.Start(System.out);
    }

    public static Chord parseString(String toParse) throws ParseException, TokenMgrError, NumberFormatException {
      ChordParser parser = new ChordParser(new ByteArrayInputStream(toParse.getBytes()));
      //parser.Start(System.out);
      return parser.ParseChord();
    }

  final public void Start(PrintStream printStream) throws ParseException {
  Chord chord;
    chord = ParseChord();
    printStream.println(chord.toString());
  }

  final public Chord ParseChord() throws ParseException {
  Note root;
  Token ts;
  Integer[] degreeList;
  int degree;
    if (jj_2_5(4)) {
      root = ParseNote();
      jj_consume_token(COLON);
      ts = jj_consume_token(SHORTHAND);
    degree = 0; degreeList = new Integer[0];
      if (jj_2_1(4)) {
        jj_consume_token(OPEN_BRACE);
        degreeList = DegreeList();
        jj_consume_token(CLOSE_BRACE);
      } else {
        ;
      }
      if (jj_2_2(4)) {
        jj_consume_token(SLASH);
        degree = Degree();
      } else {
        ;
      }
    if (degreeList.length == 0 && degree == 0) { {if (true) return new Chord(root, ts.image);} }
    List<Note> notes = new Chord(root, ts.image).getNotesAsList();
    for (int i=0; i < degreeList.length; i++) {
      if (degreeList[i] > 0) {
        notes.add(root.withOffset(degreeList[i]));
      }
      else if (degreeList[i] < 0) {
        notes.remove(root.withOffset(-degreeList[i]));
      }
    }
    {if (true) return new Chord(degree, notes.toArray(new Note[notes.size()]));}
    } else if (jj_2_6(4)) {
      root = ParseNote();
      jj_consume_token(COLON);
      jj_consume_token(OPEN_BRACE_AC);
      degreeList = DegreeList();
      jj_consume_token(CLOSE_BRACE);
    degree = 0;
      if (jj_2_3(4)) {
        jj_consume_token(SLASH);
        degree = Degree();
      } else {
        ;
      }
    List<Note> notes = new ArrayList<Note>();
    notes.add(root);
    for (int i=0; i < degreeList.length; i++) { notes.add(root.withOffset(degreeList[i])); }
    {if (true) return new Chord(degree, notes.toArray(new Note[notes.size()]));}
    } else if (jj_2_7(4)) {
      root = ParseNote();
    degree = 0;
      if (jj_2_4(4)) {
        jj_consume_token(SLASH);
        degree = Degree();
      } else {
        ;
      }
    {if (true) return new Chord(degree, root, "maj");}
    } else if (jj_2_8(4)) {
      jj_consume_token(NO_CHORD);
    {if (true) return Chord.empty();}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int Degree() throws ParseException, NumberFormatException {
  Token ti;
  Token tm;
  int deg;
    if (jj_2_9(4)) {
      ti = jj_consume_token(INTERVAL);
    {if (true) return Interval.toOffset(Integer.parseInt(ti.image));}
    } else if (jj_2_10(4)) {
      tm = jj_consume_token(MODIFIER);
      deg = Degree();
    if ("b".equals(tm.image)) { {if (true) return deg - 1;} } else if ("#".equals(tm.image)) { {if (true) return deg + 1;} }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int DegreeListElement() throws ParseException {
  int d;
    if (jj_2_11(4)) {
      jj_consume_token(OMIT);
      d = Degree();
    {if (true) return -d;}
    } else if (jj_2_12(4)) {
      d = Degree();
    {if (true) return d;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Integer[] DegreeList() throws ParseException {
  int el1;
  List<Integer> list;
  int prevElem;
    list = new ArrayList<Integer>();
    el1 = DegreeListElement();
    list.add(el1);
    label_1:
    while (true) {
      if (jj_2_13(4)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(COMMA);
      prevElem = DegreeListElement();
      list.add(prevElem);
    }
    {if (true) return list.toArray(new Integer[list.size()]);}
    throw new Error("Missing return statement in function");
  }

  final public Note ParseNote() throws ParseException {
  Token tn;
  Token tm;
  int total;
    tn = jj_consume_token(NATURAL);
    total = 0;
    label_2:
    while (true) {
      if (jj_2_14(4)) {
        ;
      } else {
        break label_2;
      }
      tm = jj_consume_token(MODIFIER);
      if ("b".equals(tm.image)) { total--; } else if ("#".equals(tm.image)) { total++; }
    }
    {if (true) return Note.valueOf(tn.image).withOffset(total);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_3_3() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(OPEN_BRACE_AC)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(OMIT)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(OPEN_BRACE)) return true;
    if (jj_3R_3()) return true;
    if (jj_scan_token(CLOSE_BRACE)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(MODIFIER)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(MODIFIER)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(INTERVAL)) return true;
    return false;
  }

  private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(SHORTHAND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(NATURAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(NO_CHORD)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_5()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_3() {
    if (jj_3R_6()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public ChordParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[14];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ChordParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ChordParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ChordParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ChordParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ChordParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ChordParser(ChordParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ChordParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[18];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 14; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
